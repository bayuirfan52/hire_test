// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:hire_test/app/data/request/create_employee_entity.dart';
import 'package:hire_test/app/data/request/login_entity.dart';
import 'package:hire_test/app/data/response/detail_employee_entity.dart';
import 'package:hire_test/app/data/response/employee_entity.dart';
import 'package:hire_test/app/data/response/error_entity.dart';
import 'package:hire_test/app/data/response/list_employee_entity.dart';
import 'package:hire_test/app/data/response/token_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);

class JsonConvert {
  static Map<String, JsonConvertFunction> get convertFuncMap =>
      {
        (CreateEmployeeEntity).toString(): CreateEmployeeEntity.fromJson,
        (LoginEntity).toString(): LoginEntity.fromJson,
        (DetailEmployeeEntity).toString(): DetailEmployeeEntity.fromJson,
        (DetailEmployeeData).toString(): DetailEmployeeData.fromJson,
        (DetailEmployeeSupport).toString(): DetailEmployeeSupport.fromJson,
        (EmployeeEntity).toString(): EmployeeEntity.fromJson,
        (ErrorEntity).toString(): ErrorEntity.fromJson,
        (ListEmployeeEntity).toString(): ListEmployeeEntity.fromJson,
        (ListEmployeeData).toString(): ListEmployeeData.fromJson,
        (ListEmployeeSupport).toString(): ListEmployeeSupport.fromJson,
        (TokenEntity).toString(): TokenEntity.fromJson,
      };

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        return convertFuncMap[type]!(Map<String, dynamic>.from(value)) as T;
      } else {
        throw UnimplementedError('$type unimplemented');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<CreateEmployeeEntity>[] is M) {
      return data.map<CreateEmployeeEntity>((Map<String, dynamic> e) => CreateEmployeeEntity.fromJson(e)).toList() as M;
    }
    if (<LoginEntity>[] is M) {
      return data.map<LoginEntity>((Map<String, dynamic> e) => LoginEntity.fromJson(e)).toList() as M;
    }
    if (<DetailEmployeeEntity>[] is M) {
      return data.map<DetailEmployeeEntity>((Map<String, dynamic> e) => DetailEmployeeEntity.fromJson(e)).toList() as M;
    }
    if (<DetailEmployeeData>[] is M) {
      return data.map<DetailEmployeeData>((Map<String, dynamic> e) => DetailEmployeeData.fromJson(e)).toList() as M;
    }
    if (<DetailEmployeeSupport>[] is M) {
      return data.map<DetailEmployeeSupport>((Map<String, dynamic> e) => DetailEmployeeSupport.fromJson(e)).toList() as M;
    }
    if (<EmployeeEntity>[] is M) {
      return data.map<EmployeeEntity>((Map<String, dynamic> e) => EmployeeEntity.fromJson(e)).toList() as M;
    }
    if (<ErrorEntity>[] is M) {
      return data.map<ErrorEntity>((Map<String, dynamic> e) => ErrorEntity.fromJson(e)).toList() as M;
    }
    if (<ListEmployeeEntity>[] is M) {
      return data.map<ListEmployeeEntity>((Map<String, dynamic> e) => ListEmployeeEntity.fromJson(e)).toList() as M;
    }
    if (<ListEmployeeData>[] is M) {
      return data.map<ListEmployeeData>((Map<String, dynamic> e) => ListEmployeeData.fromJson(e)).toList() as M;
    }
    if (<ListEmployeeSupport>[] is M) {
      return data.map<ListEmployeeSupport>((Map<String, dynamic> e) => ListEmployeeSupport.fromJson(e)).toList() as M;
    }
    if (<TokenEntity>[] is M) {
      return data.map<TokenEntity>((Map<String, dynamic> e) => TokenEntity.fromJson(e)).toList() as M;
    }

    debugPrint("${M.toString()} not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}